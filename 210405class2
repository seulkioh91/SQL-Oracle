SELECT *
FROM employees
WHERE salary BETWEEN 10000 AND 20000;

-- BETWEEN a AND b a와 b사이의  수 >= <=


SELECT *
FROM employees
WHERE salary IN(10000, 17000, 24000);

-- IN = 와 유사하지만 =은 하나만 조건으로 지정하고
-- IN은 값을 여러개 설정


SELECT *
FROM employees
WHERE job_id LIKE 'AD%';

-- LIKE는 명확하지 않은 조건으로 찾을 때
-- ~처럼 ~같은
-- 조건에는 문자나 숫자를 포함할 수 있다.
-- % 모든 문자     _ 한글자 라는 의미이다.


SELECT *
FROM employees
WHERE first_name LIKE 'Le%'

-- first_name 에서 Le~ 모두 출력


SELECT *
FROM employees
WHERE first_name LIKE '%ame%'

-- first_name 에서 ~ame~ 모두 출력


SELECT *
FROM employees
WHERE first_name LIKE '%in'

-- first_name 에서 ~in 모두 출력


SELECT *
FROM employees
WHERE job_id LIKE 'AD___';

-- job_id에서 글자가 3글자. AD뒤에 따라오는 문자열이 3자리인 데이터


SELECT *
FROM employees
WHERE manager_id IS NULL;

-- manager_id 가 결측치인 것(아무것도 없는 것)
-- 0 이나 공백이 아닌, 아무것도 없는 값을 NULL로 표기한다.


SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

-- 조건을 동시에 만족하는 데이터를 검색


SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR job_id = 'FI_ACCOUNT';

-- 조건을 동시에 만족하는 데이터를 검색
-- AND나 OR를 계속 붙여, 추가할 수 있다.


SELECT *
FROM employees
WHERE employee_id <>105;

-- employee_id 가 105가 아닌 것. <>아니다.


SELECT *
FROM employees
WHERE employee_id IS NOT NULL;

-- NULL값이 아닌경우
-- IS NULL 은 반대. IS NPT NULL <> IS NULL


SELECT last_name,
    LOWER(last_name),
    UPPER(last_name),
    email,
    INITCAP(email)
FROM employees;    

-- employee 테이블에서 last_name을 소문자와 대문자로 출력
-- email은 첫 글자만 대문자로 출력


SELECT job_id, 
        SUBSTR(job_id, 1,2)
FROM employees;

-- employees테이블에서 job_id 값의 첫 자리부터 두개 문자 출력


SELECT job_id, 
        REPLACE(job_id, 'ACCOUNT', 'ACCT')
FROM employees;

-- employees테이블에서 job_id 값의 ACCOUNT 값을 ACCT로 줄여라


SELECT first_name, LPAD(first_name, 12, '*')
FROM employees;

-- employees 테이블의 first_name 을 12자리로 맞추고 나머지를 *로 채워라.
-- 어떤 문자로 채운다 ' ' , '*', 등등.. 왼쪽인지 LPAD 오른쪽인지 RPAD

SELECT first_name, RPAD(first_name, 12, '*')
FROM employees;

-- employees 테이블의 first_name 을 12자리로 맞추고 나머지를 *로 채워라.
-- 어떤 문자로 채운다 ' ' , '*', 등등.. 왼쪽인지 LPAD 오른쪽인지 RPAD


SELECT job_id,
    LTRIM(job_id, 'F'),
    RTRIM(job_id, 'F')
    
FROM employees;

-- LTRIM 왼쪽부터 F문자를 자른다.
-- RTRIM 오른쪽부터 F문자를 자른다.


SELECT TRIM('    Bigdata    ')

From dual;

-- 앞 뒤 여백 강제로 지우기






